import torch
import torch.nn as nn

class SpatialAttention(nn.Module):
    def __init__(self, in_channels):
        super(SpatialAttention, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.max_pool = nn.AdaptiveMaxPool2d(1)
        self.conv1 = nn.Conv2d(in_channels, in_channels // 2, kernel_size=1)
        self.conv2 = nn.Conv2d(in_channels // 2, 1, kernel_size=1)

    def forward(self, x):
        avg_out = self.avg_pool(x)
        max_out = self.max_pool(x)
        out = torch.cat([avg_out, max_out], dim=1)
        out = self.conv1(out)
        out = self.conv2(out)
        weights = torch.sigmoid(out)
        x = x * weights
        return x

class SpatialAttentionNet(nn.Module):
    def __init__(self, num_classes):
        super(SpatialAttentionNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.attention1 = SpatialAttention(128)
        self.conv3 = nn.Conv2d(128, 256, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(256, 512, kernel_size=3, padding=1)
        self.attention2 = SpatialAttention(512)
        self.fc = nn.Linear(512, num_classes)

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.relu(self.conv2(x))
        x = self.attention1(x)
        x = torch.relu(self.conv3(x))
        x = torch.relu(self.conv4(x))
        x = self.attention2(x)
        x = x.mean([2, 3])  # Global average pooling
        x = self.fc(x)
        return x

# Example usage:
input_tensor = torch.randn(1, 3, 64, 64)  # Assuming a 3-channel input with a spatial size of 64x64
net = ComplexSpatialAttentionNet(num_classes=10)
output = net(input_tensor)
